// ==UserScript==
// @name         Torn Red Rabbit's Ranked War
// @namespace    http://tampermonkey.net/
// @version      0.2
// @description  Highlight who I want to hit in a ranked war
// @author       Red-Rabbit [2209631]
// @include      https://www.torn.com/factions.php?step=profile&ID=*
// @connect      api.torn.com
// @require      https://raw.githubusercontent.com/edlau2/Tampermonkey/master/helpers/Torn-JS-Helpers.js
// @grant        GM_addStyle
// @grant        GM_xmlhttpRequest
// @grant        GM_getValue
// @grant        GM_setValue
// @grant        unsafeWindow
// ==/UserScript==

/*eslint no-unused-vars: 0*/
/*eslint no-undef: 0*/
/*eslint no-multi-spaces: 0*/

(function() {
    'use strict';


    // I'm going to go ahead and add some CSS styles for later use.
    // Since this is the first thing run, these styles will always be
    // available. To use, simply call "element.classList.add('highlight-active');"
    // Another option, instead of adding a class, is to do this:
    // element.setAttribute('style', '<all that stuff>'); which over-rides CSS styles
    // "all that stuff" I would make a const string somewhere.
    GM_addStyle(`.highlight-active {
                                -webkit-animation: highlight-active 1s linear 0s infinite normal;
                                animation: highlight-active 1s linear 0s infinite normal;
                                background-color: lightgreen;
    }`);

    // This is where things will start. Need to find the UL of the members on the right-hand side.
    // If it hasn't loaded yet, come back in a bit.
    let onWarPage = false; // Set to true to prevent checking again
    function handlePageLoad() {
        if (!onWarPage) { // Make sure we are on a 'rank/war' page
            let hash = location.hash;
            //log('hash: ', hash);
            if (hash.indexOf('war/rank') < 0) return setTimeout(handlePageLoad, 500); // If not, check again in half sec.
            onWarPage = true; // If we are, don't check again.
        }

        let memberList = document.querySelector("#react-root > div > div > ul > li.descriptions > div > div.faction-war.membersWrap___Ibeoe > " +
                                "div.tab-menu-cont.cont-gray.bottom-round.tabMenuCont___iaH_0.your-faction.profile-mode.right");
        if (!memberList) return setTimeout(handlePageLoad, 500); // Not here yet, come back in .5 secs.
                                                          // Don't forget the 'return', otherwise the bad selector
                                                          // will be used! We'll be re-called in a half sec.

        // This is where we start going through the list. First thing is
        // to iterate the LI's in the list of members. We might get the UL
        // before it is full so may need to address that. (doesn't seem like we
        // do, if that was the case we'd use a 'mutation observer' to detect
        // changes. No need to worry about that now)
        let ul = memberList.querySelector('div > ul');
        log('Got member list: ', ul);
        if (memberList.length < 10) return setTimeout(handlePageLoad, 500); // Need at least 10 members in a ranked war

        // Get an array of LI's and iterate. The <li> (list item) represents each opposing
        // member on the right hand side of the screen, and is made up of bits and pieces
        // describing the guy and how it is displayed. This is where we'd add blinking colors
        // or whatever else we wanted to do.
        let liArray = ul.getElementsByTagName('li');
        for (let i = 0; i < liArray.length; i++) {
            let member = liArray[i]; // 'member' is the <li>, which is a 'list item' in the <ul>, an 'unordered list'
            log('Member #' + i + ': ', member);

            // Do stuff here. For example, the level is right there:
            let level = member.querySelector("div.level.left.level___JkQN6").textContent;
            log('Level: ', level);

            // What I would do, here, is get the member's ID (I'm sure it's in there
            // somewhere, I need to look using the Inspector) and then call the Torn API
            // to get their profile info, or basic info, or combination of that sort of
            // thing, if I wanted to look at more than the level - such as rank. They may
            // be level holding, for example. I may also want to see if a spy exists.
            // If I do that, it is a function call that takes a callback, so the call
            // would be made here, and another funciton would process it.

            // For now, we'll just set their name to blink light green (that's the
            // color I picked in the GM_addSTyle call) if their level is < 50.
            if (Number(level) < 50) { // Make 'level' a number, it's a string!
                let name_sel = member.querySelector("div.member.icons.left.member___usVhx");
                name_sel.classList.add('highlight-active');
            }
        }
    }

    //////////////////////////////////////////////////////////////////////
    // Main. These are just function calls, so this is where the
    // script starts. Everything above are just functions called when
    // needed. So, it logs the fact that we've started, then does a
    // vesion check just to notify when updated, and then waits for
    // a bit until the page's DOM (Document Object Model) has loaded.
    //
    // You can start scripts at various stages of the document load,
    // depending on what they do. If I need a certain thing to be present,
    // such as say the title bar, I can simply check to see if it's
    // there (via document.querySelector(...)), and if not, set a timeout
    // to check again in a half second.
    //////////////////////////////////////////////////////////////////////

    logScriptStart();
    //validateApiKey(); // Only needed if we want to query the Torn API. This prompts for a key if not yet saved.
    versionCheck();

    // Delay until DOM content load (not full page) complete
    if (document.readyState == 'loading') {
        document.addEventListener('DOMContentLoaded', handlePageLoaded);
    } else {
        handlePageLoad();
    }
    
    // Could also just call and delay if required stuff not yet present...
    // I do that in 'handlePageLoad()' when certain pieces, like the 'memberList',
    // aren't there yet. I call "return setTimeout(handlePageLoad, nnn);" so it's
    // recalled after a short interval.

})();


